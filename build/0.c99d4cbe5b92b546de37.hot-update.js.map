{"version":3,"file":"0.c99d4cbe5b92b546de37.hot-update.js","sources":["webpack:///src/server/app.js","webpack:///src/server/redis/index.js","webpack:///src/server/socket/index.js"],"sourcesContent":["import initRouter from './router';\nimport './model';\nimport redisClient from './redis/index';\n\nconst bodyParser = require('body-parser');\nconst express = require('express');\nconst path = require('path');\nconst session = require('express-session');\nconst redisStore = require('connect-redis');\n// const path = require('path');\n// const cors = require('cors');\n\n\nexport default function initServer (app) {\n\n  // app.use(function (req, res, next) {\n  //   res.header('Access-Control-Allow-Origin', '*');        \n  //   res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\n  //   res.header('Access-Control-Allow-Headers', 'Content-Type');\n  //   res.header('Access-Control-Allow-Credentials','true');\n  //   next();\n  // })\n\n  app.use(bodyParser.json());\n  app.use(bodyParser.urlencoded({ extended: false }));\n  app.use(session({\n    secret: 'This is sparker server',\n    cookie: {maxAge: 60 * 1000 * 60 * 24 * 14},\n    resave: false,\n    saveUninitialized: true,\n    store: new redisStore({\n      client: redisClient,\n    })\n  }));\n\n  // app.use(session({\n  //   secret: config.sessionConfig.secret,\n  //   cookie: {maxAge: config.sessionConfig.maxAge },\n  //   resave: false,\n  //   saveUninitialized: true,\n  //   store: new RedisStore({\n  //     client: ping.redisClient,\n  //   }),\n  // }));\n\n  app.use(express.static(path.resolve(__dirname + '../../../build/public')));\n  app.use(express.static(path.resolve(__dirname + '../../../build/static')));  \n  app.use(express.static(path.resolve(__dirname + '../../../build')));\n  \n  initRouter(app);\n  \n}\n\n\n\n// WEBPACK FOOTER //\n// src/server/app.js","const redis = require('redis');\n\nconst client = redis.createClient();\n\nclient.sget = function (key) {\n  return new Promise((resolve, reject) => {\n    client.get(key, (err, value) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve(value);\n    });\n  });\n};\n\nexport default client;\n\n\n\n// WEBPACK FOOTER //\n// src/server/redis/index.js","import redisClient from '../redis';\nimport docModel from '../model/doc';\n// const http = require('http');\nconst socket = require('socket.io');\nconst slate = require('slate');\nconst Value = slate.Value;\n\nfunction init (server) {\n  const io = socket(server, { origins: '*:*' });\n  // io.set('transports', ['websocket', 'xhr-polling', 'jsonp-polling', 'htmlfile', 'flashsocket']);\n  io.set('origins', '*:*');\n  io.on('connection', function (socket) {\n    socket.on('initSocket', async ({ docId }) => {\n      // 加入以docId为标识的房间\n      socket.join(docId);\n      const doc = await redisClient.sget(docId);\n      // 若redis有缓存，则直接从redis上取\n      if (doc) {\n        socket.emit('init', { value: Value.fromJSON(JSON.parse(doc)) });\n        return;\n      }\n      const result = await docModel.fetchDoc(docId);\n      const value = Value.fromJSON(JSON.parse(result[0].content));\n      redisClient.set(docId, result[0].content);\n      socket.emit('init', { value });      \n    });\n  \n    socket.on('update', async (data) => {\n      const { docId } = data;\n      // 将该文档的修改内容发送给其他正在访问该文档的人\n      socket.broadcast.to(docId).emit('updateFromOthers', data);\n      const doc = await redisClient.sget(docId);\n      const value = Value.fromJSON(JSON.parse(doc)).change().applyOperations(data.ops).value;\n      const content = JSON.stringify(value.toJSON());\n      // 将更新的内容存入数据库，并且更新缓存数据库的内容\n      redisClient.set(docId, content);\n      await docModel.updateDoc(docId, content);\n    });\n  });\n\n  return io;\n}\n\nexport default init;\n\n\n// WEBPACK FOOTER //\n// src/server/socket/index.js"],"mappings":";;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AALA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AAKA;AANA;AACA;AADA;AAAA;AAAA;AACA;AADA;AASA;AACA;AACA;AAAA;AACA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAHA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAAA;AARA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}