{"version":3,"file":"0.e730842f72a668e1a1ee.hot-update.js","sources":["webpack:///src/Component/SparkerEditor/featurePlugins/markdown.js"],"sourcesContent":["export function MarkdownPlugins (options) {\n  return {\n    onKeyDown (event, change) {\n      switch (event.key) {\n        case 'Tab': return onTab(event, change);\n        case ' ': return onSpace(event, change);\n        case 'Backspace': return onBackspace(event, change);\n        case 'Enter': return onEnter(event, change);\n        case '*': return handleBold(event, change);\n        default: return;\n      }\n    }\n  };\n}\n\nfunction handleBold (event, change) {\n  const { value } = change;\n  if (value.isExpanded) return;\n  const { startBlock, startOffset } = value;\n  const chars = startBlock.text;\n  if (isToggleMark('*', chars, startOffset)) {\n    const {\n      deleteRange,\n      boldChars,\n      newestChange\n    } = findDeleteRangeAndTargetChars(change, chars, startOffset);\n    event.preventDefault();   \n    console.log(boldChars, deleteRange);   \n    // change.delete();\n    newestChange\n      .move(deleteRange - 1)\n      // .deleteBackward(deleteRange)\n      // .insertText(boldChars)\n      // .extend(boldChars.length)\n      // .addMark('bold')\n      // .collapseToEnd()\n      // .removeMark('bold');\n    // change.insertText('asdasd');\n  }\n  return true;\n}\n\nfunction isToggleMark(markChar, chars, offset) {\n  if (chars[offset] === markChar || chars[offset - 1] === markChar) {\n    if (chars.match(/\\*\\*/gi) && chars.match(/\\*\\*/gi).length >= 1 && chars.match(/\\*/gi).length >= 3) {\n      return true;\n    }\n  }\n}\nfunction findDeleteRangeAndTargetChars(change, chars, startOffset) {\n  const firstIndex = chars.indexOf('**');\n  let boldChars, deleteRange, newestChange = change;\n  // 若是在后面插入**\n  if (startOffset > firstIndex + 1) {\n    newestChange = change.move(-startOffset)    \n      .move(firstIndex);    \n    if (chars[startOffset] === '*') {\n      deleteRange = startOffset - firstIndex;\n      boldChars = chars.slice(firstIndex + 2, startOffset);\n    } else {\n      deleteRange = startOffset - firstIndex - 1;\n      boldChars = chars.slice(firstIndex + 2, startOffset - 1);\n    }\n  } else {\n    if (chars[startOffset] === '*') {\n      deleteRange = firstIndex - startOffset + 1;\n      boldChars = chars.slice(startOffset + 1, firstIndex);\n    } else {\n      deleteRange = firstIndex - startOffset;\n      newestChange = change.move(-1)    \n      boldChars = chars.slice(startOffset, firstIndex);\n    }\n  }\n  return {\n    boldChars,\n    deleteRange,\n    newestChange,\n  };\n}\n\nfunction onTab (event, change) {\n  const { value } = change;\n  if (value.isExpanded) return;\n\n  // if (startBlock.type === 'code') {\n  event.preventDefault();\n  change.delete();\n  change.insertText('  ');\n  return true;\n  // }\n}\n\nfunction onSpace (event, change) {\n  const { value } = change;\n  if (value.isExpanded) return;\n  const { startBlock, startOffset } = value;\n  const chars = startBlock.text.slice(0, startOffset).replace(/\\s*/g, '');\n  const type = getType(chars);\n\n  if (!type) return;\n  if (type === 'unorder-list' && startBlock.type === 'unorder-list') return;\n  if (type === 'order-list' && startBlock.type === 'order-list') return;\n  event.preventDefault();\n\n  change.setBlock(type);\n\n  if (type === 'unorder-list') {\n    change.wrapBlock('bulleted-list');\n  } else if (type === 'order-list') {\n    change.wrapBlock('numbered-list');\n  }\n\n  change.extendToStartOf(startBlock).delete();\n  return true;\n} \n\nfunction onBackspace (event, change) {\n  const { value } = change;\n  if (value.isExpanded) return;\n  if (value.startOffset !== 0) return;\n\n  const { startBlock } = value;\n  if (startBlock.type === 'paragraph') return;\n\n  event.preventDefault();\n  change.setBlock('paragraph');\n\n  if (startBlock.type === 'unorder-list') {\n    change.unwrapBlock('bulleted-list');\n  } else if (startBlock.type === 'order-list') {\n    change.unwrapBlock('numbered-list');\n  }\n\n  return true;\n}\n\nfunction onEnter (event, change) {\n  const { value } = change;\n  if (value.isExpanded) return;\n\n  const { startBlock, startOffset, endOffset } = value;\n  if (startOffset === 0 && startBlock.text.length === 0) return onBackspace(event, change);\n  if (startBlock.type === 'code' && !event.shiftKey) {\n    change.delete();\n    change.insertText('\\n');\n    return true;\n  }\n  if (endOffset !== startBlock.text.length) return;\n  \n\n  if (\n    startBlock.type !== 'heading-one' &&\n    startBlock.type !== 'heading-two' &&\n    startBlock.type !== 'heading-three' &&\n    startBlock.type !== 'heading-four' &&\n    startBlock.type !== 'heading-five' &&\n    startBlock.type !== 'heading-six' &&\n    startBlock.type !== 'block-quote' &&\n    startBlock.type !== 'code'\n  ) {\n    return;\n  }\n\n  event.preventDefault();\n  change.splitBlock().setBlock('paragraph');\n  return true;\n}\n\nfunction getType (type) {\n  if (/^\\d+.$/gi.test(type)) {\n    return 'order-list';\n  }\n  switch (type) {\n    case '#': return 'heading-one';\n    case '##': return 'heading-two';\n    case '###': return 'heading-three';\n    case '####': return 'heading-four';\n    case '#####': return 'heading-five';\n    case '```': return 'code';\n    case '*':\n    case '-':\n    case '+': return 'unorder-list';\n    case '>': return 'block-quote';\n    default: return null; \n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// src/Component/SparkerEditor/featurePlugins/markdown.js"],"mappings":";;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AANA;AAQA;AAVA;AAYA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAXA;AAaA;;;;A","sourceRoot":""}