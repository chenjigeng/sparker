{"version":3,"file":"0.e4941183592e6a3d6b3a.hot-update.js","sources":["webpack:///src/server/model/doc.js"],"sourcesContent":["import permissionModel from './permission';\nimport connection from './index';\n// const crypto = require('crypto');\nconst moment = require('moment');\n\nconst Constant = require('../config');\n\nconst docModel = {};\n\nconst content = JSON.stringify({\n  document: {\n    nodes: [\n      {\n        object: 'block',\n        type: 'paragraph',\n        nodes: [\n          {\n            object: 'text',\n            leaves: [\n              {\n                text: 'Hello World'\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n});\n\n\ndocModel.create = async function (userId) {\n  const doc = {\n    content,\n    name: '未命名文档',\n    create_time: moment(new Date()).format('YYYY-MM-DD HH:mm:ss'),\n    update_time: moment(new Date()).format('YYYY-MM-DD HH:mm:ss'),\n  };\n  try {\n    const { result } = await connection.$query('Insert Into document Set ?', doc);\n    const prevDocs = await docModel.fetchDocs(userId);\n    const docId = result.insertId;\n    const newDocs = prevDocs.concat(docId);\n    const results = await Promise.all([\n      docModel.updateDocs(userId, newDocs.toString()),\n      permissionModel.create(userId, docId, Constant.permissionConstant.OWNER),\n    ]);\n    return Promise.resolve(result);\n  } catch (err) {\n    return Promise.reject(err);\n  }\n\n};\n\ndocModel.fetchDoc = async (docId) => {\n  try {\n    const { result } = await connection.$query('select * from document where doc_id = ?', [docId]);\n    return Promise.resolve(result);\n  } catch (err) {\n    return Promise.reject(err);\n  }\n};\n\ndocModel.fetchDocs = async (userId) => {\n  try {\n    const { result } = await connection.$query('select docs from user where user_id = ?', [userId]);\n    if (!result.length) {\n      return Promise.reject({\n        code: Constant.resCodes.EQUAL,\n      });\n    }\n    let docs = [];\n    if (result[0].docs) {\n      docs = new Array(result[0].docs);\n    }\n    return Promise.resolve(docs);\n  } catch (err) {\n    return Promise.reject(err);\n  }\n};\n\ndocModel.updateDocs = async (userId, docs) => {\n  try {\n    const { result } = await connection.$query('update user set docs = ? where user_id = ?', [docs, userId]);\n    return Promise.resolve(result);\n  } catch (err) {\n    return Promise.reject(err);\n  }\n};\n\ndocModel.updateDoc = async (docId, content) => {\n  try {\n    const { result } = await connection.$query('update document set content = ? where doc_id = ?', [content, docId]);\n    return Promise.resolve(result);\n  } catch (err) {\n    return Promise.reject(err);\n  }\n};\n\ndocModel.fetchUserDocs = async (userId) => {\n  try {\n    const docsId = await docModel.fetchDocs(userId);\n    if (!docsId.length) {\n      return Promise.resolve([]);\n    }\n    const sql = `Select * from document where doc_id in (${docsId.toString()})`;\n    const { result } = await connection.$query(sql);\n    return Promise.resolve(result);\n  } catch (err) {\n    return Promise.reject(err);\n  }\n};\n\n// export default  docModel;\nexport default docModel;\n\n\n\n// WEBPACK FOOTER //\n// src/server/model/doc.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AADA;AAHA;AAJA;AAFA;AADA;AACA;AAqBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAQA;AARA;AAAA;AACA;AADA;AASA;AACA;AACA;AAXA;AAAA;AACA;AADA;AAYA;AAZA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAsBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AAFA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAQA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AAKA;AADA;AACA;AALA;AAQA;AACA;AAAA;AACA;AACA;AAXA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAiBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AAFA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAQA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AAFA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAQA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAMA;AANA;AAAA;AACA;AADA;AAAA;AAOA;AAPA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAaA;AACA;;;;A","sourceRoot":""}