{"version":3,"file":"0.ea286f9852200ea85ce6.hot-update.js","sources":["webpack:///./node_modules/connect-redis/index.js","webpack:///./node_modules/connect-redis/lib/connect-redis.js","webpack:///src/server/app.js","webpack:///src/server/redis/index.js","webpack:///src/server/socket/index.js","webpack:///external \"debug\"","webpack:///external \"util\""],"sourcesContent":["module.exports = require('./lib/connect-redis');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/connect-redis/index.js\n// module id = ./node_modules/connect-redis/index.js\n// module chunks = 0","/*!\n * Connect - Redis\n * Copyright(c) 2012 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\nvar debug = require('debug')('connect:redis');\nvar redis = require('redis');\nvar util = require('util');\nvar noop = function(){};\n\n/**\n * One day in seconds.\n */\n\nvar oneDay = 86400;\n\nfunction getTTL(store, sess, sid) {\n  if (typeof store.ttl === 'number' || typeof store.ttl === 'string') return store.ttl;\n  if (typeof store.ttl === 'function') return store.ttl(store, sess, sid);\n  if (store.ttl) throw new TypeError('`store.ttl` must be a number or function.');\n\n  var maxAge = sess.cookie.maxAge;\n  return (typeof maxAge === 'number'\n    ? Math.floor(maxAge / 1000)\n    : oneDay);\n}\n\n/**\n * Return the `RedisStore` extending `express`'s session Store.\n *\n * @param {object} express session\n * @return {Function}\n * @api public\n */\n\nmodule.exports = function (session) {\n\n  /**\n   * Express's session Store.\n   */\n\n  var Store = session.Store;\n\n  /**\n   * Initialize RedisStore with the given `options`.\n   *\n   * @param {Object} options\n   * @api public\n   */\n\n  function RedisStore (options) {\n    if (!(this instanceof RedisStore)) {\n      throw new TypeError('Cannot call RedisStore constructor as a function');\n    }\n\n    var self = this;\n\n    options = options || {};\n    Store.call(this, options);\n    this.prefix = options.prefix == null\n      ? 'sess:'\n      : options.prefix;\n\n    delete options.prefix;\n\n    this.scanCount = Number(options.scanCount) || 100;\n    delete options.scanCount;\n\n    this.serializer = options.serializer || JSON;\n\n    if (options.url) {\n      options.socket = options.url;\n    }\n\n    // convert to redis connect params\n    if (options.client) {\n      this.client = options.client;\n    }\n    else if (options.socket) {\n      this.client = redis.createClient(options.socket, options);\n    }\n    else {\n      this.client = redis.createClient(options);\n    }\n\n    // logErrors\n    if(options.logErrors){\n      // if options.logErrors is function, allow it to override. else provide default logger. useful for large scale deployment\n      // which may need to write to a distributed log\n      if(typeof options.logErrors != 'function'){\n        options.logErrors = function (err) {\n          console.error('Warning: connect-redis reported a client error: ' + err);\n        };\n      }\n      this.client.on('error', options.logErrors);\n    }\n\n    if (options.pass) {\n      this.client.auth(options.pass, function (err) {\n        if (err) {\n          throw err;\n        }\n      });\n    }\n\n    this.ttl = options.ttl;\n    this.disableTTL = options.disableTTL;\n\n    if (options.unref) this.client.unref();\n\n    if ('db' in options) {\n      if (typeof options.db !== 'number') {\n        console.error('Warning: connect-redis expects a number for the \"db\" option');\n      }\n\n      self.client.select(options.db);\n      self.client.on('connect', function () {\n        self.client.select(options.db);\n      });\n    }\n\n    self.client.on('error', function (er) {\n      debug('Redis returned err', er);\n      self.emit('disconnect', er);\n    });\n\n    self.client.on('connect', function () {\n      self.emit('connect');\n    });\n  }\n\n  /**\n   * Inherit from `Store`.\n   */\n\n  util.inherits(RedisStore, Store);\n\n  /**\n   * Attempt to fetch session by the given `sid`.\n   *\n   * @param {String} sid\n   * @param {Function} fn\n   * @api public\n   */\n\n  RedisStore.prototype.get = function (sid, fn) {\n    var store = this;\n    var psid = store.prefix + sid;\n    if (!fn) fn = noop;\n    debug('GET \"%s\"', sid);\n\n    store.client.get(psid, function (er, data) {\n      if (er) return fn(er);\n      if (!data) return fn();\n\n      var result;\n      data = data.toString();\n      debug('GOT %s', data);\n\n      try {\n        result = store.serializer.parse(data);\n      }\n      catch (er) {\n        return fn(er);\n      }\n      return fn(null, result);\n    });\n  };\n\n  /**\n   * Commit the given `sess` object associated with the given `sid`.\n   *\n   * @param {String} sid\n   * @param {Session} sess\n   * @param {Function} fn\n   * @api public\n   */\n\n  RedisStore.prototype.set = function (sid, sess, fn) {\n    var store = this;\n    var args = [store.prefix + sid];\n    if (!fn) fn = noop;\n\n    try {\n      var jsess = store.serializer.stringify(sess);\n    }\n    catch (er) {\n      return fn(er);\n    }\n\n    args.push(jsess);\n\n    if (!store.disableTTL) {\n      var ttl = getTTL(store, sess, sid);\n      args.push('EX', ttl);\n      debug('SET \"%s\" %s ttl:%s', sid, jsess, ttl);\n    } else {\n      debug('SET \"%s\" %s', sid, jsess);\n    }\n\n    store.client.set(args, function (er) {\n      if (er) return fn(er);\n      debug('SET complete');\n      fn.apply(null, arguments);\n    });\n  };\n\n  /**\n   * Destroy the session associated with the given `sid`.\n   *\n   * @param {String} sid\n   * @api public\n   */\n\n  RedisStore.prototype.destroy = function (sid, fn) {\n    debug('DEL \"%s\"', sid);\n    if (Array.isArray(sid)) {\n      var multi = this.client.multi();\n      var prefix = this.prefix;\n      sid.forEach(function (s) {\n        multi.del(prefix + s);\n      });\n      multi.exec(fn);\n    } else {\n      sid = this.prefix + sid;\n      this.client.del(sid, fn);\n    }\n  };\n\n  /**\n   * Refresh the time-to-live for the session with the given `sid`.\n   *\n   * @param {String} sid\n   * @param {Session} sess\n   * @param {Function} fn\n   * @api public\n   */\n\n  RedisStore.prototype.touch = function (sid, sess, fn) {\n    var store = this;\n    var psid = store.prefix + sid;\n    if (!fn) fn = noop;\n    if (store.disableTTL) return fn();\n\n    var ttl = getTTL(store, sess);\n\n    debug('EXPIRE \"%s\" ttl:%s', sid, ttl);\n    store.client.expire(psid, ttl, function (er) {\n      if (er) return fn(er);\n      debug('EXPIRE complete');\n      fn.apply(this, arguments);\n    });\n  };\n\n  /**\n   * Fetch all sessions' Redis keys using non-blocking SCAN command\n   *\n   * @param {Function} fn\n   * @api private\n   */\n\n  function allKeys (store, cb) {\n    var keysObj = {}; // Use an object to dedupe as scan can return duplicates\n    var pattern = store.prefix + '*';\n    var scanCount = store.scanCount;\n    debug('SCAN \"%s\"', pattern);\n    (function nextBatch (cursorId) {\n      store.client.scan(cursorId, 'match', pattern, 'count', scanCount, function (err, result) {\n        if (err) return cb(err);\n\n        var nextCursorId = result[0];\n        var keys = result[1];\n\n        debug('SCAN complete (next cursor = \"%s\")', nextCursorId);\n\n        keys.forEach(function (key) {\n          keysObj[key] = 1;\n        });\n\n        if (nextCursorId != 0) {\n          // next batch\n          return nextBatch(nextCursorId);\n        }\n\n        // end of cursor\n        return cb(null, Object.keys(keysObj));\n      });\n    })(0);\n  }\n\n  /**\n   * Fetch all sessions' ids\n   *\n   * @param {Function} fn\n   * @api public\n   */\n\n  RedisStore.prototype.ids = function (fn) {\n    var store = this;\n    var prefixLength = store.prefix.length;\n    if (!fn) fn = noop;\n\n    allKeys(store, function (err, keys) {\n      if (err) return fn(err);\n\n      keys = keys.map(function (key) {\n        return key.substr(prefixLength);\n      });\n      return fn(null, keys);\n    });\n  };\n\n\n  /**\n   * Fetch all sessions\n   *\n   * @param {Function} fn\n   * @api public\n   */\n\n  RedisStore.prototype.all = function (fn) {\n    var store = this;\n    var prefixLength = store.prefix.length;\n    if (!fn) fn = noop;\n\n    allKeys(store, function (err, keys) {\n      if (err) return fn(err);\n\n      if (keys.length === 0) return fn(null,[]);\n\n      store.client.mget(keys, function (err, sessions) {\n        if (err) return fn(err);\n\n        var result;\n        try {\n          result = sessions.map(function (data, index) {\n            data = data.toString();\n            data = store.serializer.parse(data);\n            data.id = keys[index].substr(prefixLength);\n            return data;\n          });\n        } catch (e) {\n          err = e;\n        }\n\n        return fn(err, result);\n      });\n    });\n  };\n\n  return RedisStore;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/connect-redis/lib/connect-redis.js\n// module id = ./node_modules/connect-redis/lib/connect-redis.js\n// module chunks = 0","import initRouter from './router';\nimport './model';\n\nconst bodyParser = require('body-parser');\nconst express = require('express');\nconst path = require('path');\nconst session = require('express-session');\nconst redisStore = require('connect-redis');\nconst redis = require('./redis');\n// const path = require('path');\n// const cors = require('cors');\n\n\n\nexport default function initServer (app) {\n\n  // app.use(function (req, res, next) {\n  //   res.header('Access-Control-Allow-Origin', '*');        \n  //   res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\n  //   res.header('Access-Control-Allow-Headers', 'Content-Type');\n  //   res.header('Access-Control-Allow-Credentials','true');\n  //   next();\n  // })\n\n  app.use(bodyParser.json());\n  app.use(bodyParser.urlencoded({ extended: false }));\n  app.use(session({\n    secret: 'This is sparker server',\n    cookie: {maxAge: 60 * 1000 * 60 * 24 * 14},\n    resave: false,\n    saveUninitialized: true,\n    store: new redisStore({\n      client: redis,\n    })\n  }));\n  console.log(path.resolve(__dirname + '../../../build/public'));\n  console.log(path.resolve(__dirname + '/static'))\n  app.use(express.static(path.resolve(__dirname + '../../../build/public')));\n  app.use(express.static(path.resolve(__dirname + '../../../build/static')));  \n  app.use(express.static(path.resolve(__dirname + '../../../build')));\n  \n  initRouter(app);\n  \n}\n\n\n\n// WEBPACK FOOTER //\n// src/server/app.js","const redis = require('redis');\n\nconst client = redis.createClient();\n\nclient.sget = function (key) {\n  return new Promise((resolve, reject) => {\n    client.get(key, (err, value) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve(value);\n    });\n  });\n};\n\nexport default client;\n\n\n\n// WEBPACK FOOTER //\n// src/server/redis/index.js","import redisClient from '../redis';\nimport docModel from '../model/doc';\n// const http = require('http');\nconst socket = require('socket.io');\nconst slate = require('slate');\nconst Value = slate.Value;\n\nfunction init (server) {\n  const io = socket(server, { origins: '*:*' });\n  // io.set('transports', ['websocket', 'xhr-polling', 'jsonp-polling', 'htmlfile', 'flashsocket']);\n  io.set('origins', '*:*');\n  io.on('connection', function (socket) {\n    socket.on('initSocket', async ({ docId }) => {\n      // 加入以docId为标识的房间\n      socket.join(docId);\n      const doc = await redisClient.sget(docId);\n      // 若redis有缓存，则直接从redis上取\n      if (doc) {\n        socket.emit('init', { value: Value.fromJSON(JSON.parse(doc)) });\n        return;\n      }\n      const result = await docModel.fetchDoc(docId);\n      const value = Value.fromJSON(JSON.parse(result[0].content));\n      redisClient.set(docId, result[0].content);\n      socket.emit('init', { value });      \n    });\n  \n    socket.on('update', async (data) => {\n      const { docId } = data;\n      // 将该文档的修改内容发送给其他正在访问该文档的人\n      socket.broadcast.to(docId).emit('updateFromOthers', data);\n      const doc = await redisClient.sget(docId);\n      const value = Value.fromJSON(JSON.parse(doc)).change().applyOperations(data.ops).value;\n      const content = JSON.stringify(value.toJSON());\n      // 将更新的内容存入数据库，并且更新缓存数据库的内容\n      redisClient.set(docId, content);\n      await docModel.updateDoc(docId, content);\n    });\n  });\n\n  return io;\n}\n\nexport default init;\n\n\n// WEBPACK FOOTER //\n// src/server/socket/index.js","module.exports = require(\"debug\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"debug\"\n// module id = debug\n// module chunks = 0","module.exports = require(\"util\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"util\"\n// module id = util\n// module chunks = 0"],"mappings":";;;;;;AAAA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChWA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AALA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AAKA;AANA;AACA;AADA;AAAA;AAAA;AACA;AADA;AASA;AACA;AACA;AAAA;AACA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAHA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAAA;AARA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC3CA;;;;;;;ACAA;;;;A","sourceRoot":""}